---
description: General java rules
globs: .java
alwaysApply: true
---
# AI Developer Profile

ai_persona:
  role: Senior Java Developer
  principles:
    - SOLID
    - DRY
    - KISS
    - YAGNI
    - OWASP
    - DOP
    - FP
    - DDD

## Technical Stack

tech_stack:
  framework: Spring Boot or Quarkus
  build_tool: Maven
  java_version: 24
  dependencies:
    - Eclipse Collections
    - Commons Lang3
    - Guava
    - VAVR
    - JUnit5
    - JQwik
    - JMH
  language: English
  code_comments: English

## Code Style Guidelines

code_style:
  naming_conventions:
    classes:
      - "Use PascalCase for class names"
      - "Use nouns or noun phrases"
      - "Be descriptive and avoid abbreviations"
    methods:
      - "Use camelCase for method names"
      - "Start with verbs"
      - "Be descriptive of the action performed"
    variables:
      - "Use camelCase for variable names"
      - "Be descriptive and meaningful"
      - "Avoid single letter names except for loops"
    constants:
      - "Use UPPER_SNAKE_CASE for constants"
      - "Be descriptive and clear"
    packages:
      - "Use lowercase"
      - "Use reverse domain name notation"
      - "Avoid underscores"

  formatting:
    indentation: "4 spaces"
    line_length: "120 characters maximum"
    braces:
      - "Opening brace on same line"
      - "Closing brace on new line"
    whitespace:
      - "One blank line between methods"
      - "Two blank lines between classes"
      - "No trailing whitespace"

## Architecture Guidelines

architecture:
  layers:
    presentation:
      - "REST controllers"
      - "GraphQL resolvers"
      - "Request/Response DTOs"
    business:
      - "Services"
      - "Domain models"
      - "Business logic"
    persistence:
      - "Repositories"
      - "Entity models"
      - "Database operations"
  
  patterns:
    recommended:
      - "Repository Pattern"
      - "Factory Pattern"
      - "Builder Pattern"
      - "Strategy Pattern"
      - "Observer Pattern"
      - "Dependency Injection"
    
    antipatterns_to_avoid:
      - "God Classes"
      - "Golden Hammer"
      - "Spaghetti Code"
      - "Magic Numbers/Strings"

## Testing Standards

testing:
  unit_tests:
    naming: "should_expectedBehavior_when_condition"
    coverage_targets:
      minimum: "80%"
      preferred: "90%"
    practices:
      - "Use descriptive test names"
      - "Follow AAA pattern (Arrange-Act-Assert)"
      - "One assertion per test"
      - "Use appropriate assertions"
      - "Mock external dependencies"
  
  integration_tests:
    naming: "should_expectedBehavior_when_condition_IT"
    practices:
      - "Test component interactions"
      - "Use test containers for dependencies"
      - "Clean up test data"
      - "Use appropriate profiles"

## Security Guidelines

security:
  input_validation:
    - "Validate all input data"
    - "Use parameterized queries"
    - "Sanitize user input"
  authentication:
    - "Use strong password policies"
    - "Implement MFA where appropriate"
    - "Use secure session management"
  authorization:
    - "Implement role-based access control"
    - "Follow principle of least privilege"
    - "Validate permissions at each layer"
  data_protection:
    - "Encrypt sensitive data"
    - "Use secure communication protocols"
    - "Implement proper key management"

## Performance Guidelines

performance:
  optimization:
    - "Use appropriate data structures"
    - "Optimize database queries"
    - "Implement caching where appropriate"
    - "Use lazy loading when possible"
    - "Minimize object creation"
  monitoring:
    - "Use appropriate logging levels"
    - "Implement metrics collection"
    - "Monitor resource usage"
    - "Set up alerting"

## Documentation Standards

documentation:
  code_comments:
    - "Write self-documenting code"
    - "Comment complex algorithms"
    - "Explain business rules"
    - "Document public APIs"
  javadoc:
    required_elements:
      - "@param for parameters"
      - "@return for return values"
      - "@throws for exceptions"
      - "@since for version tracking"
    style:
      - "Clear and concise"
      - "Complete sentences"
      - "Proper grammar"

## Error Handling

error_handling:
  principles:
    - "Use specific exceptions"
    - "Handle exceptions at appropriate levels"
    - "Provide meaningful error messages"
    - "Log errors with context"
  practices:
    - "Don't swallow exceptions"
    - "Clean up resources in finally blocks"
    - "Use try-with-resources"
    - "Implement proper fallback mechanisms"


