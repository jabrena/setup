---
description: Extension to java rules to apply logging guidelines in Java applications
globs: .java
alwaysApply: true
---
# Java Logging Guidelines

## Logging Framework

recommended_framework:
  primary: SLF4J with Logback
  alternatives:
    - Log4j2
    - Java Util Logging (JUL)

## Logging Levels

logging_levels:
  ERROR:
    usage: "For errors that are fatal to the operation, critical issues that require immediate attention"
    examples:
      - "Database connection failures"
      - "System crashes"
      - "Critical business logic failures"
  
  WARN:
    usage: "For potentially harmful situations that might lead to an error"
    examples:
      - "Configuration issues"
      - "Deprecated API usage"
      - "Missing non-critical features"
  
  INFO:
    usage: "For important business events and system state changes"
    examples:
      - "Application startup/shutdown"
      - "Service calls"
      - "Major state transitions"
  
  DEBUG:
    usage: "For detailed information useful during development and troubleshooting"
    examples:
      - "Method entry/exit"
      - "Variable values"
      - "Flow control decisions"
  
  TRACE:
    usage: "For most detailed debugging information"
    examples:
      - "Loop iterations"
      - "Very detailed flow information"

## Best Practices

logging_practices:
  general:
    - "Use static final logger instances per class"
    - "Never catch and swallow exceptions without logging"
    - "Avoid logging sensitive information (passwords, tokens, PII)"
    - "Use parameterized logging instead of string concatenation"
    - "Include correlation IDs for distributed systems"
    - "Configure appropriate log rotation and retention policies"

  code_examples:
    logger_declaration: |
      private static final Logger logger = LoggerFactory.getLogger(ClassName.class);
    
    parameterized_logging: |
      logger.debug("Processing user {} with role {}", userId, userRole);
    
    exception_logging: |
      logger.error("Failed to process transaction {}", transactionId, exception);

  performance:
    - "Use guard clauses for expensive logging operations"
    - "Implement async logging for high-throughput applications"
    - "Configure appropriate buffer sizes and flush intervals"
    - "Monitor logging impact on application performance"

  structured_logging:
    - "Use JSON format for machine-readable logs"
    - "Include consistent metadata in log entries"
    - "Add context information (thread, user, session)"
    - "Use MDC (Mapped Diagnostic Context) for request tracking"

## Configuration Guidelines

configuration:
  file_organization:
    - "Separate logging configurations per environment"
    - "Use external configuration files"
    - "Implement different log levels for different packages"
  
  output_formats:
    - "Include timestamp with timezone"
    - "Add log level"
    - "Include logger name/source class"
    - "Add thread information"
    - "Include correlation ID"
    - "Add contextual data"

  example_pattern: |
    %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} [%X{correlationId}] - %msg%n

## Security Considerations

security:
  - "Mask sensitive data in logs"
  - "Implement log access controls"
  - "Use secure transmission for remote logging"
  - "Regular log reviews for security events"
  - "Comply with data protection regulations"

## Monitoring and Alerting

monitoring:
  - "Set up log aggregation"
  - "Implement log-based alerts"
  - "Use structured logging for better querying"
  - "Regular log analysis for patterns"
  - "Monitor logging system health"

## Testing

testing_guidelines:
  - "Include logging assertions in tests"
  - "Verify log messages in integration tests"
  - "Test different logging levels"
  - "Validate log format compliance"
  - "Check performance impact of logging"