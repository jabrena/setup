---
description: Extension to java rules to apply modern features released in java8+
globs: .java
alwaysApply: true
---
# Java 8+ Modern Development Guidelines

## 1. Lambda Expressions and Functional Interfaces

### Best Practices

- Prefer lambda expressions over anonymous classes
- Keep lambda expressions short and readable
- Use method references when possible
- Leverage built-in functional interfaces from java.util.function
- Create custom functional interfaces only when necessary
- Use @FunctionalInterface annotation for custom functional interfaces

```java
// Good: Using method reference
list.forEach(System.out::println);

// Good: Simple lambda
list.stream()
    .filter(str -> str.length() > 5)
    .collect(Collectors.toList());

// Good: Custom functional interface
@FunctionalInterface
interface DataProcessor<T, R> {
    R process(T data);
}
```

## 2. Stream API

### Usage Guidelines
- Use streams for collection processing
- Prefer declarative over imperative approach
- Chain operations effectively
- Use appropriate terminal operations
- Consider performance implications
- Use parallel streams judiciously

```java
// Good: Effective stream usage
List<String> processedData = data.stream()
    .filter(Objects::nonNull)
    .map(String::trim)
    .filter(s -> !s.isEmpty())
    .distinct()
    .collect(Collectors.toList());

// Good: Parallel stream for CPU-intensive tasks
long count = hugeList.parallelStream()
    .filter(this::complexOperation)
    .count();
```

## 3. Optional

### Best Practices

- Use Optional to represent nullable values
- Avoid using Optional.get() without isPresent() check
- Leverage Optional's functional methods
- Don't use Optional as method parameter
- Don't use Optional in fields
- Use orElse() and orElseGet() appropriately

```java
// Good: Optional usage
return Optional.ofNullable(value)
    .map(String::trim)
    .filter(s -> !s.isEmpty())
    .orElse("default");

// Good: Complex Optional chain
return userRepository.findById(id)
    .map(User::getAddress)
    .map(Address::getCountry)
    .map(Country::getCode)
    .orElse("UNKNOWN");
```

## 4. Date/Time API

### Best Practices

- Use java.time package instead of java.util.Date
- Choose appropriate class for your needs
- Use instant for machine time
- Use ZonedDateTime for time zones
- Use Duration and Period appropriately
- Format dates using DateTimeFormatter

```java
// Good: Modern date/time usage
LocalDateTime now = LocalDateTime.now();
ZonedDateTime zonedTime = ZonedDateTime.now(ZoneId.of("UTC"));
Duration duration = Duration.between(start, end);
Period period = Period.between(startDate, endDate);
```

## 5. Default Methods

### Guidelines

- Use default methods to evolve interfaces
- Keep default methods simple
- Document default method behavior
- Avoid state in interfaces
- Consider backwards compatibility

```java
public interface DataProcessor {
    void process(Data data);
    
    // Good: Default method providing optional behavior
    default void processWithLogging(Data data) {
        System.out.println("Processing: " + data);
        process(data);
        System.out.println("Processed: " + data);
    }
}
```

## 6. Type Inference

### Best Practices

- Use var for local variables when type is clear
- Avoid var when type is not obvious
- Use explicit types for method returns and fields
- Maintain code readability

```java
// Good: Clear type inference
var users = new ArrayList<User>();
var entry = Map.entry("key", "value");

// Bad: Unclear type inference
var result = someMethod(); // Type not obvious
```

## 7. Collection Factory Methods

### Guidelines

- Use List.of(), Set.of(), Map.of() for immutable collections
- Use collectors for mutable collections
- Consider collection size for appropriate method choice
- Be aware of null handling

```java
// Good: Immutable collection creation
List<String> list = List.of("a", "b", "c");
Set<Integer> set = Set.of(1, 2, 3);
Map<String, Integer> map = Map.of(
    "one", 1,
    "two", 2
);

// Good: Collectors usage
List<String> mutableList = stream
    .collect(Collectors.toList());
```

## 8. CompletableFuture

### Best Practices

- Use for asynchronous programming
- Chain operations effectively
- Handle exceptions properly
- Configure thread pools appropriately
- Consider timeout handling
- Use appropriate completion stages

```java
// Good: CompletableFuture usage
CompletableFuture.supplyAsync(() -> fetchData())
    .thenApply(this::processData)
    .thenAccept(this::saveData)
    .exceptionally(ex -> {
        logger.error("Error: ", ex);
        return null;
    });
```

## 9. Module System (Java 9+)

### Guidelines
- Design modular applications carefully
- Use appropriate module declarations
- Consider encapsulation requirements
- Handle dependencies properly
- Use services when appropriate

```java
// Good: Module declaration
module com.example.application {
    requires java.base;
    requires java.logging;
    
    exports com.example.api;
    provides com.example.spi.Service with
        com.example.impl.ServiceImpl;
}
```

## 10. Performance Considerations

### Best Practices
- Profile before optimizing
- Use appropriate data structures
- Consider memory usage
- Use lazy initialization when appropriate
- Optimize stream operations
- Consider parallel processing carefully

```java
// Good: Lazy initialization with double-check locking
private volatile ExpensiveObject instance;

public ExpensiveObject getInstance() {
    ExpensiveObject result = instance;
    if (result == null) {
        synchronized (this) {
            result = instance;
            if (result == null) {
                instance = result = new ExpensiveObject();
            }
        }
    }
    return result;
}
```

## 11. Testing Modern Java Code

### Guidelines

- Test lambda expressions effectively
- Use appropriate assertions for Optional
- Test asynchronous code properly
- Consider stream operation testing
- Use appropriate testing frameworks
- Test edge cases thoroughly

```java
// Good: Testing lambda and streams
@Test
void testStreamOperations() {
    List<String> input = List.of("a", "bb", "ccc");
    List<String> result = input.stream()
        .filter(s -> s.length() > 1)
        .collect(Collectors.toList());
    
    assertThat(result)
        .hasSize(2)
        .contains("bb", "ccc");
}
```

## 12. Security Considerations

### Best Practices

- Use secure random number generation
- Handle sensitive data properly
- Consider thread safety
- Use appropriate encryption
- Follow secure coding practices
- Regular security updates

```java
// Good: Secure random generation
SecureRandom secureRandom = new SecureRandom();
byte[] bytes = new byte[20];
secureRandom.nextBytes(bytes);
```
